AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  aws-lambda-layering-test
  AWS Lambda Layering Test
Globals:
  Api:
    TracingEnabled: true
  Function:
    Timeout: 60
    Runtime: python3.9
    Tracing: Active
    MemorySize: 256
    Environment:
      Variables:
        LOG_LEVEL: DEBUG
        POWERTOOLS_LOGGER_SAMPLE_RATE: 0.1
        POWERTOOLS_LOGGER_LOG_EVENT: true
        POWERTOOLS_SERVICE_NAME: AWS Lambda Layering Test
        DB_NAME: postgres
        DB_USER: postgres
        DB_HOST: host.docker.internal
        DB_PORT: 5432
        DB_PASSWORD: postgres
        GDK_PIXBUF_MODULE_FILE: /opt/lib/loaders.cache
        FONTCONFIG_PATH: /opt/fonts
        XDG_DATA_DIRS: /opt/lib

Resources:
  PythonCommonLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: python_common_layer
      Description: Common Layer for lambdas
      ContentUri: common-layer.zip
      CompatibleRuntimes:
        - python3.9
      CompatibleArchitectures:
        - x86_64
      RetentionPolicy: Retain
    Metadata:
      BuildMethod: python3.9
      BuildArchitecture: x86_64

  LibsLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: libs_layer_debug
      Description: Requirements Layer for lambdas
      ContentUri: libs-layer.zip
      CompatibleRuntimes:
        - python3.9
      CompatibleArchitectures:
        - x86_64
      RetentionPolicy: Retain

  # LibsLayerWeasy:
  #   Type: AWS::Serverless::LayerVersion
  #   Properties:
  #     LayerName: libs_layer_weasy
  #     Description: Requirements Layer for lambdas
  #     ContentUri: weasyprint-layer-python3.9.zip
  #     CompatibleRuntimes:
  #       - python3.9
  #     CompatibleArchitectures:
  #       - x86_64
  #     RetentionPolicy: Retain

  APIGateway:
    Type: AWS::Serverless::HttpApi
    Properties:
      Description: HTTP API
      DisableExecuteApiEndpoint: False
      FailOnWarnings: False
      StageName: dev
      Tags:
        id: WearableAPIGateway
        application: LayeringTest

  AppFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Combined Lambda function that uses AWS PowerTools to handle all paths
      CodeUri: lambda/handlers
      Handler: app.handler
      Layers:
        - !Ref PythonCommonLayer
        - !Ref LibsLayer
        # - !Ref LibsLayerWeasy
      Runtime: python3.9
      Tracing: Active
      Architectures:
        - x86_64
      Events:
        DefaultEndpoint:
          Type: Api
          Properties:
            RestApiId: !Ref RestApi
            Path: /{proxy+}
            Method: ANY
        UserStatus:
          Type: Api
          Properties:
            ApiId: WearableAPIGateway
            Path: /customer/{customer_id}
            PayloadFormatVersion: "2.0"
            Method: get
        HealthCheck:
          Type: Api
          Properties:
            ApiId: WearableAPIGateway
            Path: /health-check
            PayloadFormatVersion: "2.0"
            Method: get
        HealthCheckDb:
          Type: Api
          Properties:
            ApiId: WearableAPIGateway
            Path: /health-check-db
            PayloadFormatVersion: "2.0"
            Method: get
  InvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref AppFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn:  !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:*

  RestApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Dev
      TracingEnabled: true

Outputs:
  LayeringTestFunction:
    Description: "Lambda Function ARN"
    Value: !GetAtt AppFunction.Arn
  LayeringTestFunctionIamRole:
    Description: "Implicit IAM Role created for function"
    Value: !GetAtt AppFunction.Arn
  ApiUrl:
    Description: URL of the API
    Value:
      Fn::Sub: "https://${RestApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}/Prod"
